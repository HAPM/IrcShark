/*----------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
-----------------------------------------------------------------------*/
-->begin
using System;
using System.IO;
using System.Collections.Generic;
using IrcShark.Extensions.Scripting;

-->namespace

public class Token {
    public int kind;    // token kind
    public int pos;     // token position in the source text (starting at 0)
    public int col;     // token column (starting at 1)
    public int line;    // token line (starting at 1)
    public string val;  // token value
    public Token next;  // ML 2005-03-11 Tokens are kept in linked list
}

//-----------------------------------------------------------------------------------
// Scanner
//-----------------------------------------------------------------------------------
public class Scanner {
    const char EOL = '\n';
    const int eofSym = 0; /* pdt */
-->declarations

    public Buffer buffer; // scanner buffer
    
    Token t;          // current token
    int ch;           // current input character
    int pos;          // byte position of current character
    int col;          // column number of current character
    int line;         // line number of current character
    int oldEols;      // EOLs that appeared in a comment;
    static readonly Dictionary<int, int> start; // maps first token character to start state

    Token tokens;     // list of tokens already peeked (first token is a dummy)
    Token pt;         // current peek token
    
    char[] tval = new char[128]; // text of current token
    int tlen;         // length of current token
    
    static Scanner() {
        start = new Dictionary<int, int>(128);
-->initialization
    }
    
    public Scanner(string fileName) {
        try {
            Stream stream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read);
            buffer = new StreamBuffer(stream, false);
            Init();
        } catch (IOException) {
            throw new FatalError("Cannot open file " + fileName);
        }
    }
    
    public Scanner(Stream s) {
        buffer = new StreamBuffer(s, true);
        Init();
    }
    
    public Scanner(TextReader reader) {
        buffer = new TextReaderBuffer(reader);
        Init();
    }
    
    void Init() {
        pos = -1; line = 1; col = 0;
        oldEols = 0;
        NextCh();
        /*if (ch == 0xEF) { // check optional byte order mark for UTF-8
            NextCh(); int ch1 = ch;
            NextCh(); int ch2 = ch;
            if (ch1 != 0xBB || ch2 != 0xBF) {
                throw new FatalError(String.Format("illegal byte order mark: EF {0,2:X} {1,2:X}", ch1, ch2));
            }
            buffer = new UTF8Buffer(buffer); col = 0;
            NextCh();
        }*/
        pt = tokens = new Token();  // first token is a dummy
    }
    
    void NextCh() {
        if (oldEols > 0) { ch = EOL; oldEols--; } 
        else {
            pos = buffer.Pos;
            ch = buffer.Read(); col++;
            // replace isolated '\r' by '\n' in order to make
            // eol handling uniform across Windows, Unix and Mac
            if (ch == '\r' && buffer.Peek() != '\n') ch = EOL;
            if (ch == EOL) { line++; col = 0; }
        }
-->casing1
    }

    void AddCh() {
        if (tlen >= tval.Length) {
            char[] newBuf = new char[2 * tval.Length];
            Array.Copy(tval, 0, newBuf, 0, tval.Length);
            tval = newBuf;
        }
        if (ch != Buffer.EOF) {
-->casing2
            NextCh();
        }
    }


-->comments

    void CheckLiteral() {
-->literals
    }

    Token NextToken() {
        while (/*ch == ' ' || we don't ignore spaces */
-->scan1
        ) NextCh();
-->scan2
        t = new Token();
        t.pos = pos; t.col = col; t.line = line; 
        int state;
        if (!start.TryGetValue(ch, out state))
            state = 0;
        tlen = 0; AddCh();
        
        switch (state) {
            case -1: { t.kind = eofSym; break; } // NextCh already done
            case 0: { t.kind = noSym; break; }   // NextCh already done
-->scan3
        }
        t.val = new String(tval, 0, tlen);
        return t;
    }
    
    // get the next token (possibly a token already seen during peeking)
    public Token Scan () {
        if (tokens.next == null) {
            return NextToken();
        } else {
            pt = tokens = tokens.next;
            return tokens;
        }
    }

    // peek for the next token, ignore pragmas
    public Token Peek () {
        do {
            if (pt.next == null) {
                pt.next = NextToken();
            }
            pt = pt.next;
        } while (pt.kind > maxT); // skip pragmas
    
        return pt;
    }

    // make sure that peeking starts at the current scan position
    public void ResetPeek () { pt = tokens; }

} // end Scanner

$$$
