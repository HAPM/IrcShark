<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2281a01e-65f5-4b46-9d02-7f00b7d95e9e}</ProjectGuid>
    <SHFBSchemaVersion>1.8.0.3</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>.\Output\</OutputPath>
    <HtmlHelpName>IrcSharpDocumentation</HtmlHelpName>
    <HelpTitle>IrcSharp Library Documentation</HelpTitle>
    <SandcastlePath>C:\Program Files\Sandcastle\</SandcastlePath>
    <DocumentationSources>
      <DocumentationSource sourceFile="..\bin\Debug\IrcSharp.dll" xmlns="" />
      <DocumentationSource sourceFile="..\bin\Debug\IrcSharp.xml" xmlns="" />
    </DocumentationSources>
    <HelpFileFormat>HtmlHelp1, MSHelp2, Website</HelpFileFormat>
    <NewProperty1>
    </NewProperty1>
    <ProjectSummary>IrcSharp is a library to communicate with a standard compatible irc server with extended functions to manage the connection, send messages and receive actions and messages from other users on the irc server. It was written as a part of the IrcShark irc client, but can be used as standalone too.</ProjectSummary>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="IrcSharp" isDocumented="True" xmlns="">The IrcSharp namespace holds all classes nessecary to communicate with an irc server. It has 2 different layers: the simple layer and the extended layer. The simple layer allows access to basic irc functions and doesn't realy care of the channels, the client is currently in, and what users are in these channels. It can be used to do easy tasks, where this informations aren't needed. All classes for this layer are in the root IrcSharp namespace. To get a managed "extended" connection the extended layer can be used. All classes of the extended layer are in the &lt;see cref="IrcSharp.Extended" /&gt; namespace. There is a thierd namespace called &lt;see cref="IrcSharp.Listener" /&gt;. It contains classes, that help you to collect informations, that come from the irc server in multible lines.</NamespaceSummaryItem>
      <NamespaceSummaryItem name="IrcSharp.Extended" isDocumented="True" xmlns="">This namespace contains all classes, that are needed for extended use of an irc connection. The &lt;see cref="IrcConnection" /&gt; class can be used to create a fully managed irc connection with all features of the IrcSharp.Extended namespace. But you can use only parts of this namespace too. Then you only need an &lt;see cref="IrcSharp.IrcClient" /&gt; instance what is used as the underlying connection. So if you only want to know in what channels you are, this can be easily done by iniialising a connection to an irc server by the IrcSharp.IrcClient class and hand over this instance to the constructor of the &lt;see cref="ChannelManager.ChannelManager" /&gt; constructor, to get a ChannelManager instance, that tracks the channels on this connection. This allows you to take fully control of what should be done by the IrcSharp library, and what you wan't do your self.</NamespaceSummaryItem>
      <NamespaceSummaryItem name="IrcSharp.Listener" isDocumented="True" xmlns="">This namespace contains all listeners, what can be used on an irc connection. A listener listens for informations on an irc connection established over an &lt;see cref="IrcSharp.IrcClient" /&gt; and contacts you over an event, when the information was completly read. As the irc protocol often uses multible lines to transfer lists of data, these listeners are a good way to do custom steps, after the complete information was received from the server.</NamespaceSummaryItem>
    </NamespaceSummaries>
    <FrameworkVersion>2.0.50727</FrameworkVersion>
    <ProjectLinkType>Local</ProjectLinkType>
    <Preliminary>True</Preliminary>
    <MissingTags>Summary, Parameter, Returns, AutoDocumentCtors, Namespace, TypeParameter, AutoDocumentDispose</MissingTags>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>